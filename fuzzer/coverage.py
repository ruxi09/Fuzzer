import os, re, subprocess
from typing import Tuple



def parse_coverage_lines(gcov_output: str) -> Tuple[int, int]:
    """
    Parses the number of lines covered and the total number of lines covered.
    Returns the tuple: (covered lines, total lines)
    """

    lines = gcov_output.split('\n')
    summary_line = lines[-2]
    m = re.search(r"Lines executed:(\d+\.\d+)% of (\d+)", summary_line)
    if m:
        executed_pcntg = float(m.group(1))
        total_lines = int(m.group(2))
        return int(total_lines * (executed_pcntg / 100.0)), total_lines

    print(f"Could not parse coverage score from \"{gcov_output}\"")
    return (0, 0)


def get_run_coverage(source_dir: str) -> float:
    """
    Retrieves the coverage information generated by gcov for the latest execution
    of the binary inside source_dir.
    Returns the total percentage of lines covered across all source files.
    """

    total_covered_lines = 0
    total_source_lines = 0
    with os.scandir(source_dir) as it:
        for entry in it:
            if entry.name.endswith(".gcno") and entry.is_file():
                try:
                    out = subprocess.run(["gcov", entry.path], check=True, capture_output=True, text=True, timeout=5)
                except subprocess.TimeoutError:
                    return 0.0
                covered_lines, total_lines = parse_coverage_lines(out.stdout)
                total_source_lines += total_lines
                total_covered_lines += covered_lines

    if total_source_lines == 0:
        return 0.0

    total_cov_pcntg = float(total_covered_lines) / float(total_source_lines)
    return total_cov_pcntg
